1.  Nodes Count in a Tree :
============================
    public int solve(TreeNode A) {
        if(A == null)
            return 0;
        return 1+solve(A.left)+solve(A.right);
    }

2. Height Of the tree :
=========================
    public int solve(TreeNode A) {
        if(A == null)
            return 0;
        return 1+ Math.max(solve(A.left),solve(A.right));
    }

3. Sum Of Nodes in a Binary Tree :
====================================
   public int solve(TreeNode A) {
        if(A==null)
            return 0;
        return nodeSum(A);
   }
   private int nodeSum(TreeNode node){
        if(node==null)
                return 0;
        return node.val + nodeSum(node.left)+nodeSum(node.right);
   }

4. Pre_order Traversal Binary tree:
=====================================

    public void preOrder(TreeNode A) {
        if(A==null)
            return;
        System.out.println(A.val);
        preOrder(A.left);
        preOrder(A.right);
    }

5.In_order Traversal Binary tree:
=====================================

    public void inOrder(TreeNode A) {
        if(A==null)
            return;
        inOrder(A.left);
        System.out.println(A.val);
        inOrder(A.right);
    }

6.Post_order Traversal Binary tree:
=====================================

    public void postOrder(TreeNode A) {
        if(A==null)
            return;
        postOrder(A.left);
        postOrder(A.right);
        System.out.println(A.val);
    }

7. Invert Binary Tree :
===========================

    public TreeNode invertTree(TreeNode A) {
        if(A==null)
             return null;
        TreeNode temp = A.left;
        A.left = A.right;
        A.right = temp;
        invertTree(A.left);
        invertTree(A.right);
        return A;
    }

8. Depth of Each node :
=========================

   public void depth(TreeNode A){

        if(A==null)
            return;
        getDepth(A,1);
   }

   public void depth(TreeNode A, int currentNodeDepth){

        if(A==null)
            return;
        A.depth = currentNodeDepth;
        getDepth(A.left,currentNodeDepth+1);
        getDepth(A.right,currentNodeDepth+1);
   }

        
   
